
// "566,673;566,669;565,664;565,661;566,657;569,653;569,649;570,642;571,637;572,632;574,629;576,625;576,620;575,615;575,612;575,608;576,602;578,599;580,596;582,593;585,589;586,587;586,585;588,583;591,582;593,581;595,580;597,577;597,575;598,572;599,571;601,569;603,566;604,563;605,559;605,555;607,548;607,545;607,540;607,534;606,528;605,523;605,519;605,514;606,510;607,507;608,503;607,496;607,491;607,484;608,478;609,472;609,464;609,456;609,450;608,447;609,442;610,438;609,435;609,429;610,420;612,416;614,410;617,404;619,401;620,397;623,393;626,389;629,384;632,382;632,378;631,372;630,364;630,358;629,354;627,350;624,346;623,342;624,337;624,333;624,328;623,322;621,316;620,311;620,307;621,301;623,298;623,292;620,290;619,286;620,279;620,274;622,269;625,263;626,258;626,252;629,251;627,248;625,244;623,240;622,235;622,229;622,225;620,221;622,218;624,215;623,210;621,206;621,201;622,196;624,193;625,190;622,188;613,187;606,185;601,185;596,182;589,177;580,170;577,165;575,160;568,159;560,160;552,161;546,159;544,158;543,155;540,150;535,148;536,146;535,145;533,142;529,138;526,133;525,127;522,123;519,119;514,117;509,118;507,114;505,114;502,115;499,114;496,113;495,114;492,115;490,114;489,110;487,107;483,104;478,102;473,103;468,104;462,107;455,108;451,108;447,106;445,109;442,113;439,112;434,114;432,119;427,121;422,123;421,128;438,166;443,166;449,165;454,164;457,167;461,168;461,173;458,178;458,182;459,186;452,187;447,190;444,192;440,197;437,204;435,206;432,206;428,207;426,211;429,217;430,221;433,226;432,231;432,234;426,237;422,236;419,234;415,235;412,239;410,244;410,251;411,257;411,260;414,263;417,262;415,267;410,273;407,276;402,278;399,281;397,286;397,291;395,295;393,298;390,300;386,305;380,306;372,307;367,313;360,316;354,316;351,319;348,322;348,329;348,332;344,332;340,331;336,333;333,336;326,338;323,343;319,343;315,344;310,344;310,344;310,348;309,348;307,352;311,356;307,362;304,367;303,372;305,375;309,379;308,382;308,387;305,391;306,398;310,402;307,404;308,411;314,414;311,419;308,421;307,427;304,434;302,440;303,445;303,447;304,452;304,456;306,459;308,465;311,466;314,468;319,468;323,470;323,473;328,475;332,476;334,480;339,476;341,474;345,476;373,496;375,501;375,505;375,509;373,513;371,517;369,524;373,528;376,530;374,535;370,538;366,541;366,548;365,552;364,558;363,562;363,567;363,572;365,578;366,585;368,587;370,593;374,597;377,601;380,601;383,604;385,607;384,611;387,616;392,618;399,619;404,621;407,622;411,623;414,625;419,626;419,626;425,629;427,630;428,630;431,631;435,634;439,635;445,637;440,639;444,643;448,643;455,644;460,644;467,644;472,643;477,641;483,641;488,641;495,643;499,644;508,648;516,651;521,654;525,656;528,654;531,652;534,651;537,653;541,654;545,657;547,660;547,666;548,670;550,672;552,674;557,674;560,671;563,673;566,674"


var mapimg, sourcePoints, points, vectors, totalD, fRate, secs, totalFrames, frameD, count, currentV;

function preload() {
	mapimg = loadImage("data/map.png")
}

function setup() {
	secs = 1;
	fRate = 30;
	totalD = 0;
	totalFrames = secs*fRate;
	count = 1;

	frameRate(fRate);
	createCanvas(1280, 720);
	image(mapimg, 0, 0);
	stroke(51);
	strokeWeight(2);
	noFill();

	sourcePoints = "566,673;566,669;565,664;565,661;566,657;569,653;569,649;570,642;571,637;572,632;574,629;576,625;576,620;575,615;575,612;575,608;576,602;578,599;580,596;582,593;585,589;586,587;586,585;588,583;591,582;593,581;595,580;597,577;597,575;598,572;599,571;601,569;603,566;604,563;605,559;605,555;607,548;607,545;607,540;607,534;606,528;605,523;605,519;605,514;606,510;607,507;608,503;607,496;607,491;607,484;608,478;609,472;609,464;609,456;609,450;608,447;609,442;610,438;609,435;609,429;610,420;612,416;614,410;617,404;619,401;620,397;623,393;626,389;629,384;632,382;632,378;631,372;630,364;630,358;629,354;627,350;624,346;623,342;624,337;624,333;624,328;623,322;621,316;620,311;620,307;621,301;623,298;623,292;620,290;619,286;620,279;620,274;622,269;625,263;626,258;626,252;629,251;627,248;625,244;623,240;622,235;622,229;622,225;620,221;622,218;624,215;623,210;621,206;621,201;622,196;624,193;625,190;622,188;613,187;606,185;601,185;596,182;589,177;580,170;577,165;575,160;568,159;560,160;552,161;546,159;544,158;543,155;540,150;535,148;536,146;535,145;533,142;529,138;526,133;525,127;522,123;519,119;514,117;509,118;507,114;505,114;502,115;499,114;496,113;495,114;492,115;490,114;489,110;487,107;483,104;478,102;473,103;468,104;462,107;455,108;451,108;447,106;445,109;442,113;439,112;434,114;432,119;427,121;422,123;421,128;438,166;443,166;449,165;454,164;457,167;461,168;461,173;458,178;458,182;459,186;452,187;447,190;444,192;440,197;437,204;435,206;432,206;428,207;426,211;429,217;430,221;433,226;432,231;432,234;426,237;422,236;419,234;415,235;412,239;410,244;410,251;411,257;411,260;414,263;417,262;415,267;410,273;407,276;402,278;399,281;397,286;397,291;395,295;393,298;390,300;386,305;380,306;372,307;367,313;360,316;354,316;351,319;348,322;348,329;348,332;344,332;340,331;336,333;333,336;326,338;323,343;319,343;315,344;310,344;310,344;310,348;309,348;307,352;311,356;307,362;304,367;303,372;305,375;309,379;308,382;308,387;305,391;306,398;310,402;307,404;308,411;314,414;311,419;308,421;307,427;304,434;302,440;303,445;303,447;304,452;304,456;306,459;308,465;311,466;314,468;319,468;323,470;323,473;328,475;332,476;334,480;339,476;341,474;345,476;373,496;375,501;375,505;375,509;373,513;371,517;369,524;373,528;376,530;374,535;370,538;366,541;366,548;365,552;364,558;363,562;363,567;363,572;365,578;366,585;368,587;370,593;374,597;377,601;380,601;383,604;385,607;384,611;387,616;392,618;399,619;404,621;407,622;411,623;414,625;419,626;419,626;425,629;427,630;428,630;431,631;435,634;439,635;445,637;440,639;444,643;448,643;455,644;460,644;467,644;472,643;477,641;483,641;488,641;495,643;499,644;508,648;516,651;521,654;525,656;528,654;531,652;534,651;537,653;541,654;545,657;547,660;547,666;548,670;550,672;552,674;557,674;560,671;563,673;566,674";
	points = sourcePoints.split(";");
	vectors = new Array(points.length);
	for (var i=0 ; i<points.length ; i++) {
		var spl = points[i].split(",");
		vectors[i] = createVector(spl[0], spl[1]);
		if (vectors[i].x == 609 && vectors[i].y == 442) {
			console.log(i);
		}
	}
	currentV = vectors[0];

	// beginShape();
	// for (var i=0 ; i<vectors.length ; i++) {
	// 	vertex(vectors[i].x, vectors[i].y);
	// }
	// endShape();

	for (var i=0 ; i<vectors.length-1 ; i++) {
		var d = vectors[i].dist(vectors[i+1]);
		totalD += d;
	}
	frameD = totalD/totalFrames;
}

function draw() {
	var d = currentV.dist(vectors[count]);
	if (d>frameD) {
		var angle = p5.Vector.angleBetween(currentV, vectors[count]);
		line(currentV.x, currentV.y, Math.cos(angle)*frameD, Math.sin(angle)*frameD);
		currentV.x += Math.cos(angle)*frameD;
		currentV.y += Math.sin(angle)*frameD;
	}
	else if (d=frameD) {
		line(currentV.x, currentV.y, vectors[count].x, vectors[count].y);
		currentV = vectors[count];
		count++;
	}
	else if (d<frameD) {
		var su = frameD;
		while(d<su) {
			line(currentV.x, currentV.y, vectors[count].x, vectors[count].y);
			su -= d;
			currentV = vectors[count];
			count++;
			d = currentV.dist(vectors[count]);
		}
	}

	if (count==vectors.length) {
		noLoop();
	}
	if (count==56) {
		push();
		fill(255, 100, 100);
		ellipse(vectors[count].x, vectors[count].y, 10, 10);
		pop();
	}
}
